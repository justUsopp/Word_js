<script>
    let scene, camera, renderer, earth, controls;
    let clickablePoints = [];
    const container = document.getElementById('globe-container');

    // Données des locations avec plus d'informations
    const locations = [
        {
            name: 'Parigi',
            country: 'Francia',
            lat: 48.8566,
            lon: 2.3522,
            description: 'La Città della Luce, famosa per la Torre Eiffel, il Louvre e la sua atmosfera romantica. Parigi è il cuore della cultura e dell\'arte francese.',
            image: 'https://images.unsplash.com/photo-1502602898536-47ad22581b52?w=400&h=200&fit=crop'
        },
        {
            name: 'New York',
            country: 'Stati Uniti',
            lat: 40.7128,
            lon: -74.0060,
            description: 'La Grande Mela, metropoli che non dorme mai. Grattacieli iconici, Central Park e Broadway rendono NYC una destinazione unica al mondo.',
            image: 'https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?w=400&h=200&fit=crop'
        },
        {
            name: 'Tokyo',
            country: 'Giappone',
            lat: 35.6762,
            lon: 139.6503,
            description: 'Fusione perfetta tra tradizione e modernità. Tokyo offre templi antichi, tecnologia futuristica e una cultura gastronomica straordinaria.',
            image: 'https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=400&h=200&fit=crop'
        },
        {
            name: 'Sydney',
            country: 'Australia',
            lat: -33.8688,
            lon: 151.2093,
            description: 'Famosa per la sua Opera House e il Harbour Bridge. Sydney combina splendide spiagge urbane con un\'architettura iconica.',
            image: 'https://images.unsplash.com/photo-1506973035872-a4ec16b8e8d9?w=400&h=200&fit=crop'
        },
        {
            name: 'Rio de Janeiro',
            country: 'Brasile',
            lat: -22.9068,
            lon: -43.1729,
            description: 'La Cidade Maravilhosa con le sue spiagge famose, il Cristo Redentore e il carnevale più spettacolare del mondo.',
            image: 'https://images.unsplash.com/photo-1483729558449-99ef09a8c325?w=400&h=200&fit=crop'
        },
        {
            name: 'Cairo',
            country: 'Egitto',
            lat: 30.0444,
            lon: 31.2357,
            description: 'Città delle Piramidi e della Sfinge. Il Cairo è il cuore dell\'antico Egitto con una storia che risale a millenni fa.',
            image: 'https://images.unsplash.com/photo-1539650116574-75c0c6d73c6e?w=400&h=200&fit=crop'
        }
    ];

    function init() {
        // Scène
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(60, container.clientWidth / container.clientHeight, 0.1, 1000);
        camera.position.z = 4;

        // Renderer
        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(container.clientWidth, container.clientHeight);
        renderer.setClearColor(0x000000, 0);
        container.appendChild(renderer.domElement);

        // Lumières
        const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);

        // Texture de la Terre
        const textureLoader = new THREE.TextureLoader();
        
        // Création d'une texture simple de la Terre
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = 512;
        canvas.height = 256;
        
        // Gradient pour simuler la Terre
        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
        gradient.addColorStop(0, '#4a90e2');
        gradient.addColorStop(0.3, '#2e7d32');
        gradient.addColorStop(0.7, '#8bc34a');
        gradient.addColorStop(1, '#2196f3');
        
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Ajout de "continents" simplifiés
        ctx.fillStyle = '#4caf50';
        // Amérique
        ctx.fillRect(100, 80, 80, 100);
        // Europe/Afrique
        ctx.fillRect(220, 60, 60, 120);
        // Asie
        ctx.fillRect(320, 70, 100, 90);
        
        const earthTexture = new THREE.CanvasTexture(canvas);

        // Géométrie de la Terre
        const earthGeometry = new THREE.SphereGeometry(1.5, 64, 64);
        const earthMaterial = new THREE.MeshPhongMaterial({ 
            map: earthTexture,
            transparent: true,
            opacity: 0.9
        });
        earth = new THREE.Mesh(earthGeometry, earthMaterial);
        scene.add(earth);

        // Points des locations
        createLocationPoints();

        // Contrôles
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.enableZoom = true;
        controls.enablePan = false;
        controls.minDistance = 2.5;
        controls.maxDistance = 8;
        controls.autoRotate = true;
        controls.autoRotateSpeed = 0.5;

        // Events
        container.addEventListener('click', onMouseClick);
        window.addEventListener('resize', onWindowResize);

        // Animation
        animate();
    }

    function latLonToVector3(lat, lon, radius) {
        const phi = (90 - lat) * (Math.PI / 180);
        const theta = (lon + 180) * (Math.PI / 180);
        const x = -radius * Math.sin(phi) * Math.cos(theta);
        const z = radius * Math.sin(phi) * Math.sin(theta);
        const y = radius * Math.cos(phi);
        return new THREE.Vector3(x, y, z);
    }

    function createLocationPoints() {
        const pointGeometry = new THREE.SphereGeometry(0.04, 8, 8);
        
        locations.forEach(location => {
            const pointMaterial = new THREE.MeshBasicMaterial({ 
                color: 0xff4444,
                transparent: true,
                opacity: 0.9
            });
            
            const point = new THREE.Mesh(pointGeometry, pointMaterial);
            point.position.copy(latLonToVector3(location.lat, location.lon, 1.52));
            point.userData = location;
            
            // Ajouter un halo autour du point
            const haloGeometry = new THREE.SphereGeometry(0.06, 8, 8);
            const haloMaterial = new THREE.MeshBasicMaterial({
                color: 0xff6666,
                transparent: true,
                opacity: 0.3
            });
            const halo = new THREE.Mesh(haloGeometry, haloMaterial);
            halo.position.copy(point.position);
            
            scene.add(point);
            scene.add(halo);
            clickablePoints.push(point);
        });
    }

    function onMouseClick(event) {
        const rect = container.getBoundingClientRect();
        const mouse = new THREE.Vector2();
        mouse.x = ((event.clientX - rect.left) / container.clientWidth) * 2 - 1;
        mouse.y = -((event.clientY - rect.top) / container.clientHeight) * 2 + 1;

        const raycaster = new THREE.Raycaster();
        raycaster.setFromCamera(mouse, camera);
        
        const intersects = raycaster.intersectObjects(clickablePoints);
        if (intersects.length > 0) {
            const location = intersects[0].object.userData;
            openModal(location);
        }
    }

    function openModal(location) {
        document.getElementById('modal-title').textContent = location.name;
        document.getElementById('modal-country').textContent = location.country;
        document.getElementById('modal-description').textContent = location.description;
        document.getElementById('modal-image').src = location.image;
        document.getElementById('location-modal').classList.remove('hidden');
        document.getElementById('location-modal').classList.add('flex');
    }

    function closeModal() {
        document.getElementById('location-modal').classList.add('hidden');
        document.getElementById('location-modal').classList.remove('flex');
    }

    function scrollToGlobe() {
        document.getElementById('globe-section').scrollIntoView({ 
            behavior: 'smooth' 
        });
    }

    function onWindowResize() {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    }

    function animate() {
        requestAnimationFrame(animate);
        
        // Rotation automatique seulement si pas d'interaction
        if (earth && !controls.autoRotate) {
            earth.rotation.y += 0.002;
        }
        
        if (controls) {
            controls.update();
        }
        
        renderer.render(scene, camera);
    }

    // Initialisation
    init();

    // Fermer le modal en cliquant à l'extérieur
    document.getElementById('location-modal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
</script>
